from __future__ import annotations

import json
import os
import time
from pathlib import Path
from typing import Dict, List, Callable

from dotenv import load_dotenv

from src.clickhouse_pnl.wallet_fetchers import (
    fetch_pumpswap_pnl,
    fetch_raydium_wallets,
    fetch_meteora_wallets,
)
from src.sdk.queues.redis_connect import get_redis_sync as get_redis

load_dotenv()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ENV ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
TOKEN_QUEUES: List[str] = [
    q.strip() for q in os.getenv("TOKEN_QUEUES", "pump_queue,raydium_queue,meteora_queue").split(",") if q.strip()
]
QUEUE_FLAGS: Dict[str, str] = {
    k.strip(): v.strip()
    for k, v in (
        pair.split("=", 1)
        for pair in os.getenv(
            "QUEUE_FLAGS",
            "pump_queue=PumpSwap,raydium_queue=Raydium,meteora_queue=Meteora",
        ).split(",")
        if "=" in pair
    )
}

WALLETS_QUEUE       = os.getenv("WALLETS_QUEUE", "wallet_queue")
RESET_WALLETS_QUEUE = os.getenv("RESET_WALLETS_QUEUE", "false").lower() in {"1", "true", "yes"}
CLEAR_MARKER_KEY    = os.getenv("CLEAR_MARKER_KEY", "wallet_queue_cleared")

BLPOP_TIMEOUT = int(os.getenv("BLPOP_TIMEOUT", "300"))
DELAY_SEC     = int(os.getenv("DELAY_SEC", "0"))
OUT_DIR       = os.getenv("OUT_DIR", "reports")

# ‚ñ∏ —Ä–∞–∑–º–µ—Ä –æ–¥–Ω–æ–π –ø–∞—á–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–π –≤ Redis
BATCH_SIZE    = int(os.getenv("WALLET_BATCH", "1000"))

FETCHERS: Dict[str, Callable[[str], List[Dict]]] = {
    "PumpSwap": fetch_pumpswap_pnl,
    "Raydium":  fetch_raydium_wallets,
    "Meteora":  fetch_meteora_wallets,
}

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def clear_queues_once(rds) -> None:
    """–£–¥–∞–ª—è–µ—Ç –æ—á–µ—Ä–µ–¥–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑, –æ—Ç–º–µ—á–∞—è —ç—Ç–æ –º–∞—Ä–∫–µ—Ä–æ–º –≤ Redis."""
    if not RESET_WALLETS_QUEUE:
        return
    if rds.setnx(CLEAR_MARKER_KEY, int(time.time())):
        rds.delete(WALLETS_QUEUE, *TOKEN_QUEUES)
        print(f"üßπ  –û—á–∏—Å—Ç–∏–ª–∏ {WALLETS_QUEUE} –∏ –≤—Å–µ queues –∏–∑ TOKEN_QUEUES")
    else:
        print("üî∏ –û—á–µ—Ä–µ–¥–∏ —É–∂–µ –±—ã–ª–∏ –æ—á–∏—â–µ–Ω—ã —Ä–∞–Ω–µ–µ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É")


def push_wallets_to_redis(wallets: list[str], *, token: str, src_flag: str) -> None:
    """–ö–ª–∞–¥—ë—Ç –í–°–Æ –ø–∞—á–∫—É –∫–æ—à–µ–ª—å–∫–æ–≤ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å—å—é –≤ `WALLETS_QUEUE`."""
    if not wallets:
        return
    payload = {"src": src_flag, "token": token, "wallets": wallets}
    get_redis().rpush(WALLETS_QUEUE, json.dumps(payload))

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def consume_tokens_once() -> None:
    """
    1. –ó–∞–±–∏—Ä–∞–µ–º –í–°–ï —Ç–æ–∫–µ–Ω—ã –∏–∑ –æ—á–µ—Ä–µ–¥–µ–π TOKEN_QUEUES.
    2. –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ—à–µ–ª—å–∫–æ–≤.
    3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ—à–µ–ª—å–∫–∏ –≤ Redis –±–∞—Ç—á–∞–º–∏ –ø–æ BATCH_SIZE.
    """
    rds = get_redis()
    clear_queues_once(rds)
    Path(OUT_DIR).mkdir(parents=True, exist_ok=True)

    buffer: list[str] = []
    processed = 0

    while True:
        popped = rds.blpop(TOKEN_QUEUES, timeout=BLPOP_TIMEOUT)
        if popped is None:
            print(f"‚åõ –ù–µ—Ç –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ {BLPOP_TIMEOUT} —Å ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–±–æ—Ä —Ç–æ–∫–µ–Ω–æ–≤")
            break  # –æ—á–µ—Ä–µ–¥–∏ –æ–ø—É—Å—Ç–µ–ª–∏

        queue_raw, token_raw = popped
        queue_name = queue_raw.decode()  if isinstance(queue_raw,  (bytes, bytearray)) else str(queue_raw)
        token      = token_raw.decode()  if isinstance(token_raw,  (bytes, bytearray)) else str(token_raw)
        src_flag   = QUEUE_FLAGS.get(queue_name, queue_name)

        fetcher = FETCHERS.get(src_flag)
        if fetcher is None:
            print(f"‚ö†Ô∏è  –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π src_flag={src_flag} ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–∫–µ–Ω {token}")
            continue

        processed += 1
        print(f"üõ†Ô∏è  [{processed}] {src_flag}: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {token}")

        try:
            rows = fetcher(token)
            push_wallets_to_redis(rows, token=token, src_flag=src_flag)
            print(f"üì§  –û—Ç–ø—Ä–∞–≤–∏–ª–∏ {len(rows)} –∫–æ—à–µ–ª—å–∫–æ–≤ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ")
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ–∫–µ–Ω–∞ {token}: {e}")
            continue

        # ‚ûú –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–π –±—É—Ñ–µ—Ä
        buffer.extend(row["signing_wallet"] for row in rows)

        # ‚ûú –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–∞ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—á–∫—É
        if len(buffer) >= BATCH_SIZE:
            push_wallets_to_redis(buffer, token="batch", src_flag="mix")
            print(f"üì§  –û—Ç–ø—Ä–∞–≤–∏–ª–∏ {len(buffer)} –∫–æ—à–µ–ª—å–∫–æ–≤ –≤ {WALLETS_QUEUE}")
            buffer.clear()

        if DELAY_SEC:
            time.sleep(DELAY_SEC)

    # —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ö–≤–æ—Å—Ç
    if buffer:
        push_wallets_to_redis(buffer, token="batch", src_flag="mix")
        print(f"üì§  –§–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–ª–∞—à {len(buffer)} –∫–æ—à–µ–ª—å–∫–æ–≤ –≤ {WALLETS_QUEUE}")

    print(f"üèÅ –ì–æ—Ç–æ–≤–æ: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed} —Ç–æ–∫–µ–Ω–æ–≤, –±–∞—Ç—á {BATCH_SIZE}, –æ—á–µ—Ä–µ–¥—å ¬´{WALLETS_QUEUE}¬ª")


if __name__ == "__main__":
    try:
        consume_tokens_once()
    except KeyboardInterrupt:
        print("–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ Ctrl-C")