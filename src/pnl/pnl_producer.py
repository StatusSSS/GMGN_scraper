from __future__ import annotations

import json
import os
import time
from pathlib import Path
from typing import Dict, List, Callable

from dotenv import load_dotenv

from src.clickhouse_pnl.wallet_fetchers import (
    fetch_pumpswap_pnl,
    fetch_raydium_wallets,
    fetch_meteora_wallets,
)
from src.sdk.queues.redis_connect import get_redis_sync as get_redis

load_dotenv()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ENV ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
TOKEN_QUEUES_ENV = os.getenv("TOKEN_QUEUES", "pump_queue,raydium_queue,meteora_queue")
TOKEN_QUEUES: List[str] = [q.strip() for q in TOKEN_QUEUES_ENV.split(",") if q.strip()]

QUEUE_FLAGS_ENV = os.getenv(
    "QUEUE_FLAGS",
    "pump_queue=PumpSwap,raydium_queue=Raydium,meteora_queue=Meteora",
)
QUEUE_FLAGS: Dict[str, str] = {
    k.strip(): v.strip()
    for k, v in (
        pair.split("=", 1) for pair in QUEUE_FLAGS_ENV.split(",") if "=" in pair
    )
}

WALLETS_QUEUE = os.getenv("WALLETS_QUEUE", "wallet_queue")
# –û—á–∏—Å—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥-–º–∞—Ä–∫–µ—Ä –≤ Redis
RESET_WALLETS_QUEUE = os.getenv("RESET_WALLETS_QUEUE", "false").lower() in {
    "1",
    "true",
    "yes",
}
CLEAR_MARKER_KEY = os.getenv("CLEAR_MARKER_KEY", "wallet_queue_cleared")

DELAY_SEC = int(os.getenv("DELAY_SEC", "0"))
OUT_DIR = os.getenv("OUT_DIR", "reports")
BLPOP_TIMEOUT = int(os.getenv("BLPOP_TIMEOUT", "300"))

FETCHERS: Dict[str, Callable[[str], List[Dict]]] = {
    "PumpSwap": fetch_pumpswap_pnl,
    "Raydium": fetch_raydium_wallets,
    "Meteora": fetch_meteora_wallets,
}

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def clear_queues_once(rds) -> None:
    """–£–¥–∞–ª—è–µ—Ç –æ—á–µ—Ä–µ–¥–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑, –æ—Ç–º–µ—á–∞—è —ç—Ç–æ –º–∞—Ä–∫–µ—Ä–æ–º –≤ Redis."""
    if not RESET_WALLETS_QUEUE:
        return

    # setnx –∞—Ç–æ–º–∞—Ä–Ω–æ —Å–æ–∑–¥–∞—ë—Ç –∫–ª—é—á, –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç
    if rds.setnx(CLEAR_MARKER_KEY, int(time.time())):
        rds.delete(WALLETS_QUEUE)
        for q in TOKEN_QUEUES:
            rds.delete(q)
        print(f"üßπ  –û—á–∏—Å—Ç–∏–ª–∏ {WALLETS_QUEUE} –∏ –≤—Å–µ queues –∏–∑ TOKEN_QUEUES")
    else:
        print("üî∏ –û—á–µ—Ä–µ–¥–∏ —É–∂–µ –±—ã–ª–∏ –æ—á–∏—â–µ–Ω—ã —Ä–∞–Ω–µ–µ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É")


def push_wallets_to_redis(wallets: list[str], *, token: str, src_flag: str) -> None:
    """
    –ö–ª–∞–¥—ë—Ç –í–ï–°–¨ —Å–ø–∏—Å–æ–∫ –∫–æ—à–µ–ª—å–∫–æ–≤ —Ç–æ–∫–µ–Ω–∞ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å—å—é –≤ Redis.

    –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–æ—Ä–∫–µ—Ä–∞–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤—Å—é –ø–∞—Ä—Ç–∏—é —Ü–µ–ª–∏–∫–æ–º,
    –∞ –Ω–µ –∫—É—Å–∫–∞–º–∏ –ø–æ CHUNK_SIZE.
    """
    if not wallets:
        return
    rds = get_redis()
    payload = {"src": src_flag, "token": token, "wallets": wallets}
    rds.rpush(WALLETS_QUEUE, json.dumps(payload))

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def consume_tokens_once() -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ, –∑–∞—Ç–µ–º –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å."""
    rds = get_redis()
    clear_queues_once(rds)

    Path(OUT_DIR).mkdir(parents=True, exist_ok=True)

    processed = 0
    while True:
        popped = rds.blpop(TOKEN_QUEUES, timeout=BLPOP_TIMEOUT)
        if popped is None:
            print(f"‚åõ –ù–µ—Ç –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ {BLPOP_TIMEOUT} —Å ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É")
            break  # –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º —Ü–∏–∫–ª –∏ –≤—ã—Ö–æ–¥–∏–º

        queue_name_raw, raw_token = popped
        queue_name = (
            queue_name_raw.decode()
            if isinstance(queue_name_raw, (bytes, bytearray))
            else str(queue_name_raw)
        )
        token = (
            raw_token.decode()
            if isinstance(raw_token, (bytes, bytearray))
            else str(raw_token)
        )
        src_flag = QUEUE_FLAGS.get(queue_name, queue_name)

        processed += 1
        print(f"üõ†Ô∏è  [{processed}] {src_flag}: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω {token}")

        fetcher = FETCHERS.get(src_flag)
        if fetcher is None:
            print(f"‚ö†Ô∏è  –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π src_flag={src_flag} ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–∫–µ–Ω {token}")
            continue

        try:
            rows = fetcher(token)
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ–∫–µ–Ω–∞ {token} ({src_flag}): {e}")
            continue

        wallets = [row["signing_wallet"] for row in rows]
        push_wallets_to_redis(wallets, token=token, src_flag=src_flag)
        print(
            f"üì¨  {src_flag} token={token} ‚Üí {len(wallets)} –∫–æ—à–µ–ª—å–∫–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {WALLETS_QUEUE}"
        )

        if DELAY_SEC:
            time.sleep(DELAY_SEC)

    print("üèÅ –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á!")


if __name__ == "__main__":
    try:
        consume_tokens_once()
    except KeyboardInterrupt:
        print("–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ Ctrl-C")
